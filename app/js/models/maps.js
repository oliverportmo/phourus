// Generated by CoffeeScript 1.6.2
define(["jquery", "underscore", "backbone", "async!http://maps.google.com/maps/api/js?sensor=false!callback", "http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclusterer/src/markerclusterer.js", "text!html/window.html"], function($, _, Backbone, maps, clusters, tWindow) {
  var view;

  view = Backbone.View.extend({
    el: '#gmap',
    initialize: function(options) {
      var self;

      self = this;
      _.bindAll(this);
      Backbone.Events.on("location", this.go);
      this.geocoder = new google.maps.Geocoder();
      this.addresses(options);
      this.markers = [];
      this.windows = [];
      return this.latlng = {};
    },
    addresses: function(collection) {
      var i, out, _i, _len;

      out = [];
      for (_i = 0, _len = collection.length; _i < _len; _i++) {
        i = collection[_i];
        this.coordinates(i);
      }
      return out;
    },
    /* ASYNC CALL
    */

    coordinates: function(data) {
      var address, self, str;

      self = this;
      data = data.attributes;
      address = data.address[0];
      str = address.street + ', ' + address.city + ', ' + address.state + ' ' + address.country;
      return this.geocoder.geocode({
        'address': str
      }, function(results, status) {
        var key, loc;

        if (status === 'OK') {
          key = data.org.id;
          loc = results[0].geometry.location;
          data.lat = loc.lb;
          data.lng = loc.mb;
          self.markers[key] = self.createMarkers(data);
          self.windows[key] = self.createWindows(data);
          return google.maps.event.addListener(self.markers[key], 'click', function(event) {
            self.map.panTo(event.latLng);
            self.map.setZoom(10);
            return self.windows[key].open(self.map, self.markers[key]);
          });
        } else {
          return console.log("Geocode was not successful for the following reason: " + status);
        }
      });
    },
    render: function() {
      var container;

      this.config = {
        zoom: 4,
        center: new google.maps.LatLng(38, -95),
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
      container = document.getElementById('gmap');
      if (container !== null) {
        return this.map = new google.maps.Map(container, this.config);
      }
    },
    /*
    start: ->
      self = @   
      _.each @locations, (value, key) -> 
        self.markers[key] = self.createMarkers value  
        self.windows[key] = self.createWindows value
                     
        google.maps.event.addListener self.markers[key], 'click', (event) ->
          self.map.panTo(event.latLng);
          self.map.setZoom(10);
          self.windows[key].open(self.map, self.markers[key]);
      _.defer @clusterize
    */

    createMarkers: function(data) {
      var point, pos, self, title;

      self = this;
      title = data.org.name;
      pos = new google.maps.LatLng(data.lat, data.lng);
      point = {
        position: pos,
        map: self.map,
        title: title
      };
      return new google.maps.Marker(point);
    },
    createWindows: function(data) {
      var html, self;

      self = this;
      html = _.template(tWindow, {
        address: data.address,
        org: data.org,
        pic: self.pic
      });
      return this.windows[data.org.id] = new google.maps.InfoWindow({
        content: html
      });
    },
    clusterize: function() {
      var error;

      try {
        return this.clusters = new MarkerClusterer(this.map, this.markers);
      } catch (_error) {
        error = _error;
        return console.log(error);
      }
    },
    go: function(location) {
      var g, out, self;

      console.log(location);
      self = this;
      out = {};
      g = new google.maps.Geocoder();
      g.geocode({
        'address': location
      }, function(results, status) {
        var loc;

        if (status === 'OK') {
          loc = results[0].geometry.location;
          self.map.setZoom(6);
          return self.map.panTo(loc);
        } else {
          return console.log("Geocode was not successful for the following reason: " + status);
        }
      });
      return location;
    }
  });
  return view;
});

/*
raw = 
  0: 
    address: "1776 California St, Mountain View CA 94041"
    name: "ABC Company"
    lat: 37.396229
    lng: -122.091926
  1: 
    address: "5 Lewis Lane, East Hampstead NH 03826"
    name: "DEF Company"
    lat: 42.8910476
    lng: -71.13239659999999
  2: 
    address: "63 Fountain St, Haverhill MA 01830"
    name: "XYZ Company"
    lat: 42.7855423
    lng: -71.07526940000002
  3: 
    address: "923 Baywood Drive, Newport Beach CA 92660" 
    name: "KLI Company"
    lat: 39.1211965
    lng: -104.1678933
  4: 
    address: "1 Main St, Colorado Springs CO"
    name: "CBA Company"
    lat: 33.6133044
    lng: -117.86344020000001
data= [raw[0], raw[1], raw[2], raw[3], raw[4]]
*/

