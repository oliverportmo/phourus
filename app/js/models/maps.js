// Generated by CoffeeScript 1.6.2
define(["jquery", "underscore", "backbone", "async!http://maps.google.com/maps/api/js?sensor=false!callback", "http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclusterer/src/markerclusterer.js", "text!html/window.html"], function($, _, Backbone, maps, clusters, tWindow) {
  var data, raw, view;

  raw = {
    0: {
      address: "1776 California St, Mountain View CA 94041",
      name: "ABC Company",
      lat: 37.396229,
      lng: -122.091926
    },
    1: {
      address: "5 Lewis Lane, East Hampstead NH 03826",
      name: "DEF Company",
      lat: 42.8910476,
      lng: -71.13239659999999
    },
    2: {
      address: "63 Fountain St, Haverhill MA 01830",
      name: "XYZ Company",
      lat: 42.7855423,
      lng: -71.07526940000002
    },
    3: {
      address: "923 Baywood Drive, Newport Beach CA 92660",
      name: "KLI Company",
      lat: 39.1211965,
      lng: -104.1678933
    },
    4: {
      address: "1 Main St, Colorado Springs CO",
      name: "CBA Company",
      lat: 33.6133044,
      lng: -117.86344020000001
    }
  };
  data = [raw[0], raw[1], raw[2], raw[3], raw[4]];
  view = Backbone.View.extend({
    el: '#gmap',
    initialize: function(options) {
      var self;

      self = this;
      _.bindAll(this);
      Backbone.Events.on("location", this.go);
      this.geocoder = new google.maps.Geocoder();
      this.options.locations = options;
      this.markers = [];
      this.windows = [];
      return this.latlng = {};
    },
    render: function() {
      var container;

      this.config = {
        zoom: 4,
        center: new google.maps.LatLng(38, -95),
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
      container = document.getElementById('gmap');
      if (container !== null) {
        this.map = new google.maps.Map(container, this.config);
      }
      return this.start();
    },
    start: function() {
      var locs, self;

      self = this;
      locs = this.options.locations;
      _.each(this.options.locations, function(value, key) {
        self.markers[key] = self.createMarkers(value);
        self.windows[key] = self.createWindows(value);
        return google.maps.event.addListener(self.markers[key], 'click', function(event) {
          self.map.panTo(event.latLng);
          self.map.setZoom(10);
          return self.windows[key].open(self.map, self.markers[key]);
        });
      });
      return _.defer(this.clusterize);
    },
    createMarkers: function(location) {
      var point, pos, self;

      self = this;
      pos = new google.maps.LatLng(location.lat, location.lng);
      point = {
        position: pos,
        map: self.map,
        title: location.name
      };
      return new google.maps.Marker(point);
    },
    createWindows: function(location) {
      var html, self;

      self = this;
      html = _.template(tWindow, {
        data: location
      });
      return this.windows[location.id] = new google.maps.InfoWindow({
        content: html
      });
    },
    clusterize: function() {
      var error;

      try {
        return this.clusters = new MarkerClusterer(this.map, this.markers);
      } catch (_error) {
        error = _error;
        return console.log(error);
      }
    },
    go: function(location) {
      var g, out, self;

      self = this;
      out = {};
      g = new google.maps.Geocoder();
      g.geocode({
        'address': location
      }, function(results, status) {
        var loc;

        if (status === 'OK') {
          loc = results[0].geometry.location;
          self.map.setZoom(6);
          return self.map.panTo(loc);
        } else {
          console.log("Geocode was not successful for the following reason: " + status);
          return console.log(location);
        }
      });
      return location;
    },
    /* ASYNC CALL
    */

    coordinates: function(data, id) {
      var self;

      self = this;
      return this.geocoder.geocode({
        'address': data.address
      }, function(results, status) {
        var loc, out;

        if (status === 'OK') {
          out = {};
          loc = results[0].geometry.location;
          out.lat = loc.jb;
          out.lng = loc.kb;
          console.log(out);
          return self.latlng[id] = out;
        } else {
          return console.log("Geocode was not successful for the following reason: " + status);
        }
      });
    }
  });
  return view;
});
