// Generated by CoffeeScript 1.6.2
require.config({
  baseUrl: "/app",
  urlArgs: "bust=" + (new Date()).getTime(),
  paths: {
    jquery: "lib/jquery",
    underscore: "lib/underscore",
    backbone: "lib/backbone",
    marionette: "lib/marionette",
    text: "lib/text",
    forms: "lib/forms",
    auth: "lib/auth",
    firefly: "lib/firefly",
    async: "lib/async",
    goog: "lib/goog",
    parser: "lib/parser",
    mdown: "lib/mdown",
    markdownConverter: 'lib/converter',
    calendar: "lib/calendar",
    analytics: "js/models/analytics",
    livereload: "js/models/livereload",
    storage: "lib/storage"
  },
  shim: {
    backbone: {
      deps: ["jquery", "underscore"],
      exports: "Backbone"
    },
    underscore: {
      exports: "_"
    },
    forms: {
      deps: ["backbone"],
      exports: "forms"
    },
    jquery: {
      exports: "$"
    },
    marionette: {
      deps: ["jquery", "underscore", "backbone"],
      exports: "Marionette"
    }
  }
});

window.debug = function(input) {
  return console.log(input);
};

define("init", function(require) {
  var $, Backbone, app, mHeaders, mSession, mView, marionette, options, vAlerts, _;

  $ = require("jquery");
  _ = require("underscore");
  Backbone = require("backbone");
  marionette = require("marionette");
  mSession = require("js/models/session");
  mView = require("js/models/view");
  mHeaders = require("js/models/headers");
  vAlerts = require("js/views/alerts");
  Backbone.Collection = require("js/base/collection");
  Backbone.Model = require("js/base/model");
  Backbone.View = require("js/base/view");
  Backbone.Router = require("js/base/router");
  app = new Backbone.Marionette.Application();
  app.addRegions({
    content: "#content"
  });
  app.addInitializer(function(options) {
    var self;

    self = this;
    Backbone.Events.on("module", function(data) {
      var view;

      $("#content").removeClass('homepage');
      view = data.view;
      return app.content.show(new view(data.params));
    });
    Backbone.Events.on("alert", function(data) {
      if (data.type === "error") {
        console.log(data);
      }
      return vAlerts.add(data.type, data.message);
    });
    Backbone.Events.on("back", function(data) {
      return window.history.back();
    });
    Backbone.Events.on("token", function(data) {
      mHeaders.set("x-api-key", data.token);
      return mHeaders.set("from", data.user_id);
      /*
      Backbone.sync = (method, model, options) ->
        
        options.headers = options.headers or {}
        _.extend options.headers,
          "x-api-key": data.token
          "from": data.user_id
        
        Backbone._sync method, model, options
      */

    });
    return Backbone.Events.on("map", function(data) {
      var dev;

      dev = false;
      if (dev !== true) {
        return require(["js/models/maps"], function(mMap) {
          var gmap, map;

          gmap = $.find("#gmap").length;
          if (gmap > 0) {
            map = new mMap(data);
            map.setElement($("#gmap"));
            map.render();
          }
          return 1;
        });
      }
    });
  });
  app.on("initialize:before", function(options) {
    return mSession.local();
  });
  app.on("initialize:after", function(options) {
    var host, internal, orgs, pages, parts, standard, stream, subdomain, vFooter, vHeader, vSidebar;

    host = window.location.hostname;
    parts = host.split('.');
    subdomain = parts[0];
    options = {
      subdomain: subdomain
    };
    if (subdomain === 'docs' || subdomain === 'wiki' || subdomain === 'agency') {
      pages = require("js/routers/pages");
    } else if (subdomain === 'internal') {
      internal = require("js/routers/internal");
    } else {
      standard = require("js/routers/standard");
      stream = require("js/routers/stream");
      orgs = require("js/routers/orgs");
      pages = require("js/routers/pages");
    }
    vHeader = require("js/views/header");
    vSidebar = require("js/views/sidebar");
    vFooter = require("js/views/footer");
    app.header = new vHeader(options);
    app.sidebar = new vSidebar(options);
    app.footer = new vFooter();
    Backbone.history = Backbone.history || new Backbone.History({});
    Backbone.history.start();
    /* VIEW TRACKING
    */

    return window.onhashchange = function() {
      return $('#alerts').html('');
      /*
      alert('change')
      view= new mView()
      view.save(
        success: ()->
          alert('success')
          
        error: ()->
          alert('fail') 
      )
      */

    };
  });
  app.on("start", function(options) {});
  options = {};
  app.start(options);
  return app;
});
