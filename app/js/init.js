// Generated by CoffeeScript 1.6.2
(function() {
  require.config({
    baseUrl: "/app",
    paths: {
      jquery: "lib/jquery",
      underscore: "lib/underscore",
      backbone: "lib/backbone",
      marionette: "lib/marionette",
      text: "lib/text",
      forms: "lib/forms",
      auth: "lib/auth",
      firefly: "lib/firefly",
      async: "lib/async",
      goog: "lib/goog",
      parser: "lib/parser",
      mdown: "lib/mdown",
      markdownConverter: 'lib/converter',
      calendar: "lib/calendar",
      BaseView: "js/base/view"
    },
    shim: {
      backbone: {
        deps: ["jquery", "underscore"],
        exports: "Backbone"
      },
      underscore: {
        exports: "_"
      },
      forms: {
        deps: ["backbone"],
        exports: "forms"
      },
      jquery: {
        exports: "$"
      },
      marionette: {
        deps: ["jquery", "underscore", "backbone"],
        exports: "Marionette"
      }
    }
  });

  window.debug = function(input) {
    return console.log(input);
  };

  define("init", function(require) {
    var $, Backbone, BaseCollection, BaseModel, BaseView, app, mSession, mView, marionette, options, orgs, pages, standard, stream, vFooter, vHeader, vSidebar, _;

    $ = require("jquery");
    _ = require("underscore");
    Backbone = require("backbone");
    marionette = require("marionette");
    mSession = require("js/models/session");
    mView = require("js/models/view");
    vHeader = require("js/views/header");
    vSidebar = require("js/views/sidebar");
    vFooter = require("js/views/footer");
    BaseCollection = require("js/base/collection");
    BaseModel = require("js/base/model");
    BaseView = require("js/base/view");
    app = new Backbone.Marionette.Application();
    standard = require("js/routers/standard");
    stream = require("js/routers/stream");
    orgs = require("js/routers/orgs");
    pages = require("js/routers/pages");
    app.addInitializer(function(options) {
      app.header = new vHeader();
      app.sidebar = new vSidebar();
      app.footer = new vFooter();
      return 1;
    });
    app.addRegions({
      content: "#content"
    });
    app.addInitializer(function(options) {
      var self;

      self = this;
      Backbone.Events.on("module", function(data) {
        var view;

        $("#content").removeClass('homepage');
        view = data.view;
        return app.content.show(new view(data.params));
      });
      Backbone.Events.on("alert", function(data) {
        alert('alert');
        return console.log(data);
      });
      return Backbone.Events.on("map", function(data) {
        var dev;

        dev = false;
        if (dev !== true) {
          return require(["js/models/maps"], function(mMap) {
            var gmap, map;

            gmap = $.find("#gmap").length;
            if (gmap > 0) {
              map = new mMap(data);
              map.setElement($("#gmap"));
              map.render();
            }
            return 1;
          });
        }
      });
    });
    app.on("initialize:after", function(options) {
      Backbone.history = Backbone.history || new Backbone.History({});
      Backbone.history.start();
      return window.onhashchange = function() {
        /*
        alert('change')
        view= new mView()
        view.save(
          success: ()->
            alert('success')
            
          error: ()->
            alert('fail') 
        )
        */

      };
    });
    app.on("initialize:before", function(options) {
      var TokenSync, data, token;

      token = "guest";
      if (!_.isNull(localStorage.getItem("session"))) {
        data = $.parseJSON(localStorage.getItem("session"));
        mSession.set(data);
        if (mSession.expired()) {
          mSession.clear();
          localStorage.removeItem("session");
        } else {
          token = mSession.get("token");
        }
      }
      Backbone._sync = Backbone.sync;
      TokenSync = function(method, model, options) {
        options.headers = options.headers || {};
        _.extend(options.headers, {
          "x-api-key": token
        });
        return Backbone._sync(method, model, options);
      };
      Backbone.sync = TokenSync;
      Backbone.View = BaseView;
      Backbone.Model = BaseModel;
      return Backbone.Collection = BaseCollection;
    });
    app.on("start", function(options) {});
    options = {};
    app.start(options);
    return app;
  });

}).call(this);
