// Generated by CoffeeScript 1.6.2
(function() {
  define(["jquery", "underscore", "backbone", "forms", "text!html/stream/form.html", "js/modules/stream/models/post", "js/models/types", "js/collections/alerts"], function($, _, Backbone, forms, tForm, mSingle, mTypes, cAlerts) {
    var view;

    view = Backbone.View.extend({
      className: "form",
      initialize: function(options) {
        _.bindAll(this);
        this.model = new mSingle(options);
        this.mode = options.mode;
        this.type = options.type;
        return this.id = options.id;
      },
      render: function() {
        Backbone.Events.trigger("sidebar", "form");
        if (this.mode === "edit") {
          return this.edit(this.type, this.id);
        } else {
          if (this.mode === "add") {
            return this.add(this.type);
          }
        }
      },
      add: function(type) {
        this.model.clear();
        return this.generate("add", type, "");
      },
      edit: function(type, id) {
        var self;

        self = this;
        return this.model.fetch({
          success: function(model, response) {
            console.log(model.get("meta").type);
            return self.generate("edit", model.get("meta").type, id);
          },
          error: function(model, response) {
            return Backbone.Events.trigger({
              response: response,
              location: "modules/stream/views/form",
              action: "edit",
              type: "error"
            });
          }
        });
      },
      generate: function(mode, type, id) {
        var compiled, data, title;

        data = {};
        data.mode = mode;
        data.type = type;
        data.id = id;
        data.description = mTypes.description(type);
        data.action = "Add";
        if (data.mode === "edit") {
          data.action = "Edit";
          data.title = type;
        }
        if (data.mode === "add") {
          data.title = data.type.slice(0, data.type.length - 1);
          if (data.type === "timeline") {
            title = "Timeline";
          }
        }
        compiled = _.template(tForm, {
          data: data
        });
        this.$el.html(compiled);
        this.form(data.type);
        return compiled;
      },
      form: function(type) {
        var container, form, schema;

        if (_.isUndefined(type)) {
          return;
        }
        schema = mTypes.schema(type);
        schema = _.omit(schema, "content");
        _.extend(this.model, {
          schema: schema
        });
        form = new Backbone.Form({
          schema: schema
        });
        form.render();
        container = this.$el.find("#fields");
        return container.append(form.el);
      }
    });
    return view;
  });

}).call(this);
