// Generated by CoffeeScript 1.6.2
define(["jquery", "underscore", "backbone", "marionette", "text!html/orgs/home.html", "text!html/items/org.html", "js/modules/orgs/collections/orgs", "js/views/sidebar", "js/models/types", "js/modules/orgs/models/states", "text!html/404/orgs.html"], function($, _, Backbone, marionette, template, tOrg, cOrgs, vSidebar, mTypes, mStates, orgs404) {
  /*      
  item = Backbone.Marionette.ItemView.extend(
  	template: iList
  )
  view = Backbone.Marionette.CompositeView.extend(
    itemView: item
    itemViewContainer: '#item'
    template: template
    collection: new cGovs(raw)    
  )
  view
  */

  var view;

  view = Backbone.View.extend({
    tagName: 'div',
    className: 'orgs',
    initialize: function(options) {
      var self;

      self = this;
      return this.options = options;
    },
    events: {
      "change select": "select",
      "click button#zipcode": "zip"
    },
    select: function(e) {
      return Backbone.Events.trigger("location", $("select#state").val());
    },
    zip: function(e) {
      return Backbone.Events.trigger("location", $("input#zip").val());
    },
    render: function() {
      var self;

      self = this;
      $("#mask").show();
      Backbone.Events.trigger("sidebar", {
        type: 'default',
        params: this.options
      });
      this.collection = new cOrgs({
        type: this.options.type
      });
      return this.collection.fetch({
        success: function() {
          $("#mask").hide();
          return self.display();
        },
        error: function(collection, response) {
          $("#mask").hide();
          return self.$el.html(_.template(orgs404, {}));
        }
      });
    },
    display: function() {
      var compiled, data, list, self;

      self = this;
      data = {
        type: this.options.type
      };
      compiled = _.template(template, data);
      $(this.el).html(compiled);
      list = this.$el.find('#list');
      _.each(this.collection.models, function(model) {
        var item;

        data = model.toJSON();
        item = _.template(tOrg, {
          org: data.org,
          stats: data.stats,
          address: data.address[0],
          pic: self.pic
        });
        return list.append(item);
      });
      Backbone.Events.trigger("map", this.collection.models);
      this.dropdown();
      return compiled;
    },
    dropdown: function() {
      var self;

      self = this;
      this.model = new mStates({
        type: this.options.type
      });
      return this.model.fetch({
        success: function(model, response) {
          return self.values(response);
        },
        error: function(model, response) {
          return self.values(false);
        }
      });
    },
    values: function(data) {
      var $select, states;

      states = mTypes.states;
      if (data === false) {
        data = states;
      }
      $select = $("select#state");
      return _.each(data, function(obj, key) {
        var s, v;

        v = key;
        s = obj;
        if (!_.isUndefined(obj.state)) {
          v = obj.state;
          s = states[obj.state] + '(' + obj.total + ')';
        }
        return $select.append("<option value='" + v + "'>" + s + "</option>");
      });
    }
  });
  return view;
});
