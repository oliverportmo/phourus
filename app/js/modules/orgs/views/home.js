// Generated by CoffeeScript 1.6.2
(function() {
  define(["jquery", "underscore", "backbone", "marionette", "text!html/orgs/home.html", "text!html/orgs/listing.html", "js/modules/orgs/collections/orgs", "js/views/sidebar"], function($, _, Backbone, marionette, template, iList, cOrgs, vSidebar) {
    /*      
    item = Backbone.Marionette.ItemView.extend(
    	template: iList
    )
    view = Backbone.Marionette.CompositeView.extend(
      itemView: item
      itemViewContainer: '#item'
      template: template
      collection: new cGovs(raw)    
    )
    view
    */

    var view;

    view = Backbone.View.extend({
      tagName: 'div',
      initialize: function(options) {
        var self;

        self = this;
        return this.options = options;
      },
      render: function() {
        var self;

        self = this;
        Backbone.Events.trigger("sidebar", 'map');
        this.collection = new cOrgs({
          type: this.options.type
        });
        return this.collection.fetch({
          success: function() {
            return self.display();
          },
          error: function(collection, response) {
            return Backbone.Events.trigger({
              response: response,
              location: "modules/orgs/views/home",
              action: "read",
              type: "error"
            });
          }
        });
      },
      display: function() {
        var compiled, data, list, self;

        self = this;
        data = {
          type: this.options.type
        };
        compiled = _.template(template, data);
        $(this.el).html(compiled);
        list = this.$el.find('#list');
        _.each(this.collection.models, function(model) {
          var item;

          data = model.toJSON();
          item = _.template(iList, {
            org: data.org,
            stats: data.stats,
            address: data.address[0],
            pic: self.pic
          });
          return list.append(item);
        });
        Backbone.Events.trigger("map", this.collection.models);
        return compiled;
      }
    });
    return view;
  });

}).call(this);
