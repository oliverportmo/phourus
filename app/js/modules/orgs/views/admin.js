// Generated by CoffeeScript 1.6.2
define(["jquery", "underscore", "backbone", "forms", "text!html/orgs/admin.html", "text!html/orgs/listing-admin.html", "js/modules/orgs/collections/orgs", "js/modules/orgs/models/org", "js/models/session", "js/models/types"], function($, _, Backbone, forms, template, iOrg, cOrgs, mOrg, mSession, mTypes) {
  var view;

  view = Backbone.View.extend({
    initialize: function(options) {
      return this.options = options;
    },
    events: {
      "click .edit": "edit"
    },
    edit: function(e) {
      var id;

      id = e.currentTarget.id;
      return this.select(id);
    },
    render: function() {
      var self;

      self = this;
      Backbone.Events.trigger("sidebar", "general");
      this.options.user_id = mSession.get("user_id");
      this.collection = new cOrgs(this.options);
      return this.collection.fetch({
        success: function(collection, response) {
          return self.display();
        },
        error: function(collection, response) {
          if (response.status === 404) {
            self.$el.html('<h2 style="text-align: center">You are not the administrator of any organizations</h2>');
          }
          if (response.status === 503) {
            return Backbone.Events.trigger("alert", {
              type: "error",
              message: "Could not load Org admin",
              response: response,
              location: "modules/orgs/views/admin",
              action: "read"
            });
          }
        }
      });
    },
    display: function() {
      var compiled, i, self;

      compiled = '<h1>Please select an Organization to edit:</h1>\
      <div class="list"></div>\
      <div class="org"></div>';
      this.$el.html(compiled);
      compiled;
      self = this;
      this.select(0);
      i = 0;
      $(".list").html('');
      return _.each(this.collection.models, function(data, key) {
        var o;

        data = data.toJSON();
        o = _.template(iOrg, {
          id: i,
          org: data.org,
          address: data.address[0],
          stats: data.stats,
          pic: self.pic
        });
        $(".list").append(o);
        return i++;
      });
    },
    select: function(id) {
      var compiled, data, owner, requests;

      $(".org").html('');
      data = this.collection.models[id].toJSON();
      this.model = new mOrg(data.org);
      requests = [];
      owner = true;
      compiled = _.template(template, {
        org: data.org,
        address: data.address,
        requests: requests,
        pic: this.pic,
        owner: owner
      });
      $(".org").html(compiled);
      this.form();
      return compiled;
    },
    form: function() {
      var container, form, schema;

      schema = mTypes.schema('orgs');
      _.extend(this.model, {
        schema: schema
      });
      form = new Backbone.Form({
        schema: schema,
        model: this.model
      });
      form.render();
      container = this.$el.find("#fields");
      return container.append(form.el);
    }
  });
  return view;
});
