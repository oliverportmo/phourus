// Generated by CoffeeScript 1.6.2
define(["jquery", "underscore", "backbone", "text!html/sidebar/user.html", "text!html/sidebar/guest.html", "js/models/settings", "js/models/session", "js/modules/standard/models/user", "js/collections/history", "js/collections/notifications", "js/views/login"], function($, _, Backbone, tUser, tGuest, mSettings, mSession, mUser, cHistory, cNotifications, vLogin) {
  var view;

  view = Backbone.View.extend({
    el: "#sidebar",
    className: "default",
    initialize: function(options) {
      return this.render();
    },
    events: {
      "click .me": "me",
      "click .logout": "logout"
    },
    me: function() {
      console.log(mSettings);
      return mSettings.set("mode", "me");
    },
    logout: function() {
      localStorage.removeItem("session");
      location.href = '/';
      return location.reload(false);
    },
    render: function() {
      var compiled, options, self, u;

      if (mSession.auth() === false) {
        compiled = _.template(tGuest, {});
        $(this.el).html(compiled);
        options = {};
        options.el = "#auth-sidebar";
        return this.login = new vLogin(options);
      } else {
        self = this;
        u = new mUser({
          id: mSession.auth()
        });
        return u.fetch({
          success: function(model, response) {
            return self.user(response);
          },
          error: function(model, response) {
            if (response.status === 404) {

            } else {
              return Backbone.Events.trigger("alert", {
                type: "error",
                message: "Sidebar user could not be loaded",
                response: response,
                location: "sidebar/default",
                action: "read"
              });
            }
          }
        });
      }
    },
    user: function(model) {
      var compiled, data;

      data = {
        user: model.user,
        stats: model.stats,
        address: model.address[0]
      };
      compiled = _.template(tUser, data);
      $(this.el).append(compiled);
      this.history();
      this.notifications();
      return compiled;
    },
    history: function() {
      var $history, h;

      $history = $("ul#history");
      h = new cHistory({
        page: 0,
        limit: 4
      });
      return h.fetch({
        success: function(model, response) {
          return _.each(response, function(obj, key) {
            var name, url;

            name = '';
            url = '';
            if (!_.isUndefined(obj.post)) {
              name = obj.post.title;
              url = '#!post/' + obj.post.post_id;
            }
            if (!_.isUndefined(obj.user) && !_.isUndefined(obj.address)) {
              name = obj.user.first + ' ' + obj.user.last;
              url = '#user/' + obj.user.id;
            }
            if (!_.isUndefined(obj.org)) {
              name = obj.org.name;
              url = '#!' + obj.org.type + '/' + obj.org.id;
            }
            return $history.append('<li><a href="' + url + '">' + name + '</a></li>');
          });
        },
        error: function(model, response) {
          if (response.status === 404) {
            return $history.append('<li>History was not found</li>');
          } else {
            return Backbone.Events.trigger("alert", {
              type: "error",
              message: "Sidebar history could not be loaded",
              response: response,
              location: "sidebar/default",
              action: "read"
            });
          }
        }
      });
    },
    notifications: function() {
      var $notifications, n;

      $notifications = $("ul#notifications");
      n = new cNotifications({
        page: 0,
        limit: 4
      });
      return n.fetch({
        success: function(model, response) {
          return _.each(response, function(obj, key) {
            return $notifications.append('<li><a href="">New ' + obj.type + '</a></li>');
          });
        },
        error: function(model, response) {
          if (response.status === 404) {
            return $notifications.append('<li>Notifications were not found</li>');
          } else {
            return Backbone.Events.trigger("alert", {
              type: "error",
              message: "Sidebar notifications could not be loaded",
              response: response,
              location: "sidebar/default",
              action: "read"
            });
          }
        }
      });
    }
  });
  return view;
});
