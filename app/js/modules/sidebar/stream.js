// Generated by CoffeeScript 1.6.2
define(["jquery", "underscore", "backbone", "js/models/types", "js/models/settings", "js/modules/sidebar/widgets/recent", "js/modules/sidebar/widgets/create"], function($, _, Backbone, mTypes, mSettings, vRecent, vCreate) {
  var vSidebar;

  vSidebar = Backbone.View.extend({
    el: "#sidebar",
    className: "stream",
    initialize: function() {
      var self;

      this.render();
      self = this;
      return Backbone.history.bind("all", function(route, router) {
        var page;

        page = window.location.hash;
        page = page.replace("!", "");
        page = page.replace("#", "");
        if (page === "core" || page === "earth" || page === "mind" || page === "voice" || page === "faith") {
          self.open(page);
        }
        if (page === "stream") {
          return self.all();
        }
      });
    },
    events: {
      "click input.checkbox": "toggle",
      "click h3.collapsible": "accordion"
    },
    toggle: function(e) {
      var target, types;

      target = e.currentTarget.id;
      types = "";
      $("input.checkbox:checked").each(function(index, value) {
        var id;

        id = $(this).attr("id");
        return types += id + ";";
      });
      console.log(types);
      types = types.slice(0, types.length - 1);
      return mSettings.set("types", types);
    },
    accordion: function(e) {
      var target;

      target = e.currentTarget.id;
      return $("table#" + target).toggle();
    },
    open: function(input) {
      var type;

      type = input;
      $(".filter").hide();
      $(".filter#" + type).show();
      return _.each(mTypes.attributes, function(type) {
        var element;

        element = type.element;
        if (element === type) {

        } else {

        }
      });
    },
    create: function(e) {
      alert('hey');
      return window.location = "#add/blogs";
    },
    all: function() {
      return $(".filter").show();
    },
    render: function() {
      var keys, me, output;

      output = "";
      me = this;
      keys = _.each(mTypes.attributes, function(type) {
        var element, filtered;

        element = type.element;
        filtered = _.omit(type.sections, ["govs", "groups", "schools", "companies"]);
        output += "<div id=\"" + element + "\" class=\"filter\">";
        output += "<h3 id=\"" + element + "\" class=\"collapsible\"><a href=\"javascript:void(0)\">" + element + "</a></h3>";
        output += "<table id=\"" + element + "\">";
        output += me.filters(filtered);
        output += "</table>";
        return output += "</div>";
      });
      output += "<div id='recent'></div>";
      output += "<div id='create'></div>";
      $(this.el).append(output);
      this.subviews("#create", new vCreate());
      return this.el;
    },
    filters: function(sections) {
      var output;

      output = "";
      _.each(sections, function(name) {
        var action, checkbox, func, section, title, uri;

        name = name.toLowerCase();
        section = "add";
        func = "onclick=\"add('" + name + "')\"";
        uri = "add/" + name;
        if (name === "calculator" || name === "checklist" || name === "budget") {
          section = "view";
          func = "onclick=\"edit('" + name + "', 'edit')\"";
          uri = name;
        }
        if (name === "companies" || name === "courses" || name === "reps" || name === "searching") {
          section = "search";
          func = "onclick=\"listing('" + name + "')\"";
          uri = name;
        }
        action = "<a href=\"#" + uri + "\" id=\"action_" + name + "\" class=\"action\">" + section + "</a></td>";
        title = "<td style=\"width: 180px;padding: 0px;margin: 0px;\"><a href=\"javascript:void(0)\" id=\"" + name + "\" class=\"link\">" + name + "</a> " + "</td>";
        checkbox = "<td><input id='" + name + "' type='checkbox' class='checkbox' checked /></td>";
        return output += "<tr id=\"" + name + "\" class=\"toggle\">" + title + checkbox + "</tr>";
      });
      return output;
    }
  });
  return vSidebar;
});
